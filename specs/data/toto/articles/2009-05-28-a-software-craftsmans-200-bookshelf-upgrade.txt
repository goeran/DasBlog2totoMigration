title: "A Software Craftsman’s 200$ Bookshelf Upgrade!"
author: Jonas Follesø
date: 2009/05/28
id: 46f29e55-5369-4dbc-8f60-2bd65e1c5fa4
tags: books;craftsmanship;programming

<p>About three weeks ago, I asked my readers and some people in the Norwegian developer community about <a href="http://blog.goeran.no/PermaLink,guid,b0df5924-fb90-4506-b2e7-1e15a5e981c6.aspx">what books they have in their bookshelf</a>. The response was good, and I ended up with many good book recommendations.</p>  <p>Today I placed a new order on Amazon, and spent 200$ to upgrade my bookshelf. If you read further, you’ll see which books I ordered.</p>  <p><strong><a href="http://www.amazon.com/gp/product/0201733862" target="_blank">Software Craftsmanship: The New Imperative</a>      <br /></strong><i>Pete McBreen</i></p>  <blockquote>   <p>“This book is the foundation of the Craftsmanship movement that seem to get momentum these days (and that is a good thing). “Software craftsmanship” sounds nice and has a positive ring to it, so it does not seem to be hard to endorse. But for Pete McBreen software craftsmanship is more than just taking your job serious. It’s a way to organize teams, a way to run projects, a way to run the whole industry, a way to organize learning, and a new way to look at developers. I really like many of his ideas, and I hope people like the Craftsmanship movement not just because it sounds nice, but because they know what this book is about. Read it and see what you think of “Software engineering” when you’re done.” – <a href="http://tore.vestues.no/recommended-books/" target="_blank">Tore Vestues</a></p> </blockquote>  <p><strong><a href="http://www.amazon.com/Working-Effectively-Legacy-Robert-Martin/dp/0131177052/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1243507682&amp;sr=1-1" target="_blank">Working Effectively with Legacy Code</a>      <br /></strong><i>Michael C. Feathers</i></p>  <blockquote>   <p>“Don’t be scared away just because the title has the word “legacy” in it. This book is not about VB6 or Fortran. Not at all! It’s probably the best book I’ve read about writing automated tests. It is about how to work with code that is not tested (which is Feathers definition of legacy code). And it is about testing in general. If you want to write tests for code that is not previously tested (or written in a way that makes it testable), this book is for you.” – <a href="http://tore.vestues.no/recommended-books/" target="_blank">Tore Vestues</a></p> </blockquote>  <p><strong><a href="http://www.amazon.com/Test-Driven-Development-Addison-Wesley-Signature/dp/0321146530/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1243507704&amp;sr=1-1" target="_blank">Test Driven Development: By Example</a>      <br /></strong><i>Kent Beck     <br /></i>Kent Beck is the man behind design patterns and TDD. Do I need to say more? If you don’t know his work, have a look at his <a href="http://blip.tv/file/1163850" target="_blank">presentation from RailsConf 08</a>.</p>  <p><strong><a href="http://www.amazon.com/Extreme-Programming-Explained-Embrace-Change/dp/0321278658/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1243507725&amp;sr=1-1" target="_blank">Extreme Programming Explained: Embrace Change</a>      <br /></strong><i>Kenth Beck</i></p>  <blockquote>   <p>“Extreme programming is beautiful. Not only because it uses the well known practices of TDD, CI, Pair programming and so on. Xp is beautiful because it understands that practices do not stand on its own. You need a mindset. The mindset is expressed through the Xp Values, and throughout the entire book. Xp is close to a philosophy. Read the book and I’m sure you will see software development in a slightly different way.” – <a href="http://tore.vestues.no/recommended-books/" target="_blank">Tore Vestues</a></p> </blockquote>  <p><strong><a href="http://www.amazon.com/gp/product/0201699699/" target="_blank">Agile Software Development</a>       <br /></strong><i>Alistair Cockburn</i>     <br />Twitter sphere is amazing. I got this recommendation from my online friend <a href="http://twitter.com/liammclennan" target="_blank">Liam</a>. </p>  <p>Here is a review from Amazon:</p>  <blockquote>   <p>“Every fifteen years or so, a great book pops up that describes what projects are really like. There was Brooks, then DeMarco and Lister, and now there’s Cockburn.</p>    <p>Why is there such a gap between these great books? Possibly because the message they contain isn’t the easy-to-digest dictate: “run your project this way and everything will be fine.” Instead these books all focus on the fundamentals of projects: people and the way they work together. These books treat people as people, and not replaceable parts in a process. The books accept people’s foibles and inconsistencies, and work out how to work with them, rather than how to try to stamp them out. The books ask: how can we help these funky people work better together to produce great software?</p>    <p>Agile Software Development has some great answers, which makes it a significant book. It deals with the issue that programming is essentially communicating. It looks at the success factors of individuals, and how to help align the project with these. It discusses practical ways to reduce the latency of communication (do you know how much each extra minute taken finding things out costs on a 12 person project? How do you line your walls with information radiators?) The book mines the metaphor of development as a cooperative team game, and looks at development organizations as a community, where good citizenship pays.” – <a href="http://www.amazon.com/Agile-Software-Development/product-reviews/0201699699/ref=dp_top_cm_cr_acr_txt?ie=UTF8&amp;showViewpoints=1" target="_blank">Dave Thomas</a></p> </blockquote>  <p>I want to thank all of you how responded to my post, and my twittering. If you wondering; the total cost of the books was 160$, and 40$ in shipment L</p>
